{"version":3,"sources":["aws-services.js","FormErrors.js","Components/UploadFile.jsx","FilesList.js","Components/DateRangePickerComp.jsx","Components/SearchFile.jsx","serviceWorker.js","index.js","App.jsx"],"names":["AWS","require","bluebird","dbTableName","config","setPromisesDependency","update","region","credentials","CognitoIdentityCredentials","IdentityPoolId","s3","S3","apiVersion","params","Bucket","docClient","DynamoDB","DocumentClient","uploadFileToS3","fileName","file","Key","name","split","pop","Body","ContentType","type","upload","uploadUserDetailsToDDB","item","TableName","Item","dayTimestamp","Date","setHours","put","promise","getFileUrls","key","value","a","toLowerCase","FilterExpression","ExpressionAttributeNames","ExpressionAttributeValues","scanData","data","parse","start","end","getPresignedUrls","scan","Items","map","s3FileKey","getSignedUrl","Expires","FormErrors","formErrors","className","Object","keys","fieldName","i","length","UploadFile","props","handleUserInput","event","preventDefault","target","state","isNamevalid","isDescriptionValid","isFileValid","description","files","File","setState","validateForm","onSubmitHandler","e","on","ProgressEvent","uploaded","loaded","total","send","err","uploadedFileData","handleUploadErrors","then","res","toast","success","window","setTimeout","document","getElementById","initialState","catch","console","log","JSON","stringify","error","isFormValid","this","errorClass","htmlFor","id","placeholder","onChange","Progress","max","color","Math","round","Button","disabled","onClick","Component","FilesList","fetchedFiles","Table","striped","bordered","hover","fileDetails","href","fileUrl","rel","colSpan","DateRangePickerComp","isOpen","onToggle","selectionvalue","dateRange","format","readOnly","onSelect","singleDateRange","handleSearch","React","moment","extendMoment","originalMoment","SearchFile","onSelectDP","states","trim","charAt","toUpperCase","slice","today","range","clone","subtract","Boolean","location","hostname","match","ReactDOM","render","src","alt","to","outline","path","component","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e165a5c.chunk.js","sourcesContent":["const AWS = require(\"aws-sdk\");\r\nconst bluebird = require('bluebird');\r\n\r\nconst fileStorageS3Bucket = 'omc-dms-files';\r\nconst bucketRegion = 'ap-south-1';\r\nconst IdentityPoolId = 'ap-south-1:50c0cd12-acd7-4fc3-b8eb-3466d716dff1';\r\nconst dbTableName = 'omc-dms-file-details';\r\nconst signedUrlExpireSeconds = 600;\r\n\r\n// configure AWS to work with promises\r\nAWS.config.setPromisesDependency(bluebird);\r\n\r\n// Initialize the Amazon Cognito credentials provider\r\nAWS.config.update({\r\n    region: bucketRegion,\r\n    credentials: new AWS.CognitoIdentityCredentials({\r\n        IdentityPoolId: IdentityPoolId\r\n    })\r\n});\r\n\r\nconst s3 = new AWS.S3({\r\n    apiVersion: '2006-03-01',\r\n    params: { Bucket: fileStorageS3Bucket }\r\n});\r\n\r\nconst docClient = new AWS.DynamoDB.DocumentClient();\r\n\r\nexport function uploadFileToS3(fileName, file) {\r\n    const params = {\r\n        Key: fileName + '.' + file.name.split(\".\").pop(),\r\n        Body: file,\r\n        ContentType: file.type\r\n    }\r\n    return s3.upload(params);\r\n}\r\n\r\nexport function uploadUserDetailsToDDB(item) {\r\n    const params = {\r\n        TableName: dbTableName,\r\n        Item: { ...item, dayTimestamp: new Date().setHours(0,0,0,0) }\r\n    }\r\n    return docClient.put(params).promise();\r\n}\r\n\r\nexport async function getFileUrls(key, value) {\r\n    let params, data;\r\n    if (typeof value == \"string\") {\r\n        value = value.toLowerCase();\r\n    }\r\n    if (key === 'name') {\r\n        params = {\r\n            TableName: dbTableName,\r\n            FilterExpression: \"contains (#key, :value)\",\r\n            ExpressionAttributeNames: {\r\n                \"#key\": \"searchName\"\r\n            },\r\n            ExpressionAttributeValues: {\r\n                \":value\": value\r\n            }\r\n        }\r\n        data = await scanData(params);\r\n    }\r\n    else if (key === 'description') {\r\n        params = {\r\n            TableName: dbTableName,\r\n            FilterExpression: \"contains (#key, :value)\",\r\n            ExpressionAttributeNames: {\r\n                \"#key\": \"searchDescription\"\r\n            },\r\n            ExpressionAttributeValues: {\r\n                \":value\": value\r\n            }\r\n        }\r\n        data = await scanData(params);\r\n    }\r\n    else if (key === 'dateRange') {\r\n        debugger\r\n        params = {\r\n            TableName: dbTableName,\r\n            FilterExpression: \"#key BETWEEN :start and :end\",\r\n            ExpressionAttributeNames: {\r\n                \"#key\": \"dayTimestamp\"\r\n            },\r\n            ExpressionAttributeValues: {\r\n                \":start\": Date.parse(value.start),\r\n                \":end\": Date.parse(value.end)\r\n            }\r\n        }\r\n        data = await scanData(params);\r\n    }\r\n    return getPresignedUrls(data);\r\n}\r\n\r\nconst scanData = async (params) => {\r\n    return await docClient.scan(params).promise();\r\n}\r\n\r\nconst getPresignedUrls = async (data) => {\r\n    try {\r\n        return data.Items.map(item => ({\r\n            ...item, 'fileName': item.s3FileKey, 'fileUrl': s3.getSignedUrl('getObject', {\r\n                Bucket: fileStorageS3Bucket,\r\n                Key: item.s3FileKey,\r\n                Expires: signedUrlExpireSeconds\r\n            })\r\n        }))\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport const FormErrors = ({formErrors}) =>\r\n  <div className='formErrors'>\r\n    {Object.keys(formErrors).map((fieldName, i) => {\r\n      if(formErrors[fieldName].length > 0){\r\n        return (\r\n          <p key={i}>{formErrors[fieldName]}</p>\r\n        )        \r\n      } else {\r\n        return '';\r\n      }\r\n    })}\r\n  </div>","import React, { Component } from 'react';\nimport { Progress, Button } from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { uploadFileToS3, uploadUserDetailsToDDB } from '../aws-services';\nimport { FormErrors } from '../FormErrors';\n\nclass UploadFile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialState = {\n      name: '',\n      description: '',\n      file: '',\n      formErrors: {\n        name: '',\n        description: '',\n        file: '',\n      },\n      isNamevalid: false,\n      isDescriptionValid: false,\n      isFileValid: false,\n      isFormValid: false,\n      uploaded: 0\n    }\n  }\n\n  handleUserInput = (event) => {\n    event.preventDefault();\n    let { name, value } = event.target;\n    let formErrors = this.state.formErrors;\n    let { isNamevalid, isDescriptionValid, isFileValid } = this.state;\n\n    switch (name) {\n      case 'name':\n        isNamevalid = value.length > 0;\n        formErrors.name = isNamevalid ? '' : 'Name cannot be empty!';\n        break;\n      case 'description':\n        isDescriptionValid = value.length > 0;\n        formErrors.description = isDescriptionValid ? '' : 'Description cannot be empty!';\n        break;\n      case 'file':\n        isFileValid = event.target.files[0] instanceof File;\n        value = event.target.files[0];\n        formErrors.file = isFileValid ? '' : 'Please upload the file';\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, isNamevalid, isDescriptionValid, isFileValid, [name]: value }, () => {\n      this.validateForm();\n    })\n  }\n\n  validateForm() {\n    this.setState({ isFormValid: this.state.isNamevalid && this.state.isDescriptionValid && this.state.isFileValid });\n  }\n\n  errorClass(error) {\n    return error.length === 0 ? '' : 'has-error';\n  }\n\n  onSubmitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      uploadFileToS3(this.state.name, this.state.file)\n        .on('httpUploadProgress', ProgressEvent => {\n          this.setState({\n            uploaded: (ProgressEvent.loaded / ProgressEvent.total * 100),\n          })\n        }).send(async (err, uploadedFileData) => {\n          if (err) { this.handleUploadErrors(err); return; }\n          if (!('Key' in uploadedFileData)) { this.handleUploadErrors(err); return; }\n          const data = {\n            'name': this.state.name,\n            'searchName': this.state.name.toLowerCase(),\n            'description': this.state.description,\n            'searchDescription': this.state.description.toLowerCase(),\n            's3FileKey': uploadedFileData.Key\n          };\n          await uploadUserDetailsToDDB(data)\n            .then(res => {\n              toast.success('Upload success');\n              window.setTimeout(() => {\n                if (document.getElementById(\"fileInput\")) { document.getElementById(\"fileInput\").value = \"\"; }\n                this.setState({ ...this.initialState })\n              }, 5000);\n            })\n            .catch(err => {\n              this.handleUploadErrors(err);\n            });\n\n        });\n\n    } catch (err) {\n      this.handleUploadErrors(err);\n    }\n  }\n\n  handleUploadErrors = (err) => {\n    console.log(typeof err == \"string\" ? err : JSON.stringify(err, 2));\n    toast.error('Upload failure')\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h3>Upload your Documents</h3><br />\n        <form>\n          <div className={`form-group row ${this.errorClass(this.state.formErrors.name)}`}>\n            <label htmlFor=\"name\" className=\"col-sm-2 col-form-label\">Name</label>\n            <div className=\"col-sm-6 col-md-4\">\n              <input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" placeholder=\"Name\" value={this.state.name} onChange={this.handleUserInput} />\n            </div>\n          </div>\n          <div className={`form-group row ${this.errorClass(this.state.formErrors.description)}`}>\n            <label htmlFor=\"description\" className=\"col-sm-2 col-form-label\">Description</label>\n            <div className=\"col-sm-6 col-md-4\">\n              <textarea type=\"text\" className=\"form-control\" id=\"description\" placeholder=\"Description\" name=\"description\" value={this.state.description} onChange={this.handleUserInput} />\n            </div>\n          </div>\n\n          <div className={`form-group row ${this.errorClass(this.state.formErrors.file)}`}>\n            <label className=\"col-sm-2 col-form-label\">Upload your file</label>\n            <div className=\"col-sm-6 col-md-4\">\n              <div className=\"files\">\n                <input type=\"file\" name=\"file\" onChange={this.handleUserInput} id=\"fileInput\"></input>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"panel panel-default\">\n            <FormErrors formErrors={this.state.formErrors} />\n          </div>\n\n          <div className=\"form-group\">\n            <ToastContainer />\n            <Progress max=\"100\" color=\"success\" value={this.state.uploaded}>{Math.round(this.state.uploaded, 2)}%</Progress>\n\n          </div>\n          \n          <Button color=\"success\" disabled={!this.state.isFormValid || this.state.uploaded !== 0} onClick={this.onSubmitHandler}>Upload</Button>\n        </form>\n      </div>\n    );\n  }\n\n}\n\nexport default UploadFile;\n","import React from 'react';\r\nimport { Table, Button } from 'reactstrap';\r\nimport { FaEye } from 'react-icons/fa';\r\n\r\nconst FilesList = ({ fetchedFiles }) => {\r\n    return (\r\n        <div>\r\n            <h3>Results</h3>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Description</th>\r\n                        <th>View</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                    {fetchedFiles.length > 0 && fetchedFiles.map((fileDetails, key) => (\r\n                        <tr key={key}>\r\n                            <td>{fileDetails.name}</td>\r\n                            <td>{fileDetails.description}</td>\r\n                            <td> <a href={fileDetails.fileUrl} target=\"_blank\" rel=\"noopener noreferrer\"><Button><FaEye /></Button></a></td>\r\n                        </tr>\r\n                    ))\r\n                    }\r\n                    {fetchedFiles.length === 0 &&\r\n                        <tr>\r\n                            <td colSpan=\"3\">No results</td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilesList;","import React from \"react\";\r\nimport DateRangePicker from \"react-daterange-picker\";\r\nimport \"react-daterange-picker/dist/css/react-calendar.css\";\r\nimport { FaSearch, FaCaretDown, FaCaretUp } from 'react-icons/fa';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nclass DateRangePickerComp extends React.Component {\r\n  state = {\r\n    isOpen: false\r\n  }\r\n  onToggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n  render() {\r\n    const selectionvalue = `${this.props.dateRange.start.format(\"MMMM D, YYYY\")} - ${this.props.dateRange.end.format(\"MMMM D, YYYY\")}`\r\n    return (\r\n      <div className=\"form-group row\">\r\n        <label className=\"col-sm-2 col-form-label\">Date Range</label>\r\n        <div className=\"col-sm-6 col-md-4\">\r\n          <div className=\"input-group add-on\">\r\n            <input className=\"form-control\"\r\n              value={selectionvalue} readOnly\r\n            />\r\n            <div className=\"input-group-btn\">\r\n              <Button onClick={this.onToggle}>\r\n                {!this.state.isOpen && <FaCaretDown />}{this.state.isOpen && <FaCaretUp />}\r\n              </Button>\r\n            </div>\r\n            {this.state.isOpen && (\r\n              <DateRangePicker\r\n                value={this.props.dateRange}\r\n                onSelect={this.props.onSelect}\r\n                singleDateRange={true}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Button className=\"col-sm-1 btn-fit\" onClick={() => this.props.handleSearch('dateRange')}><FaSearch /></Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DateRangePickerComp;\r\n","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport { getFileUrls } from '../aws-services';\r\nimport FilesList from '../FilesList';\r\nimport DateRangePickerComp from './DateRangePickerComp';\r\nimport originalMoment from \"moment\";\r\nimport { extendMoment } from \"moment-range\";\r\nconst moment = extendMoment(originalMoment);\r\n\r\n/*\r\nAllows all the mimetypes, unlimited filesize\r\n*/\r\nclass SearchFile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const today = moment();\r\n    this.state = {\r\n      name: '',\r\n      description: '',\r\n      fetchedFiles: [],\r\n      dateRange: moment.range(today.clone().subtract(2, \"days\"), today.clone())\r\n    }\r\n  }\r\n  onSelectDP = (dateRange, states) => {\r\n    this.setState({ dateRange, states });\r\n  };\r\n  handleSearch = async (key) => {\r\n    this.setState({ fetchedFiles: [] });\r\n    if (key !== \"dateRange\") {\r\n      if (this.state[key] === '' || this.state[key].trim() === '') {\r\n        toast.error(`${key.charAt(0).toUpperCase() + key.slice(1)} cannot be empty!`)\r\n        return;\r\n      }\r\n    }\r\n    try {\r\n      const files = await getFileUrls(key, this.state[key]);\r\n      this.setState({ fetchedFiles: files });\r\n      if (files.length > 0) {\r\n        toast.success('Fetching success')\r\n      } else {\r\n        toast.error('Sorry! No Documents found')\r\n      }\r\n    } catch (err) {\r\n      toast.error('Fetching failure' + JSON.stringify(err, 2))\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h3>Search your Documents by: </h3><br />\r\n        <form className=\"searchFileForm\">\r\n          <div className=\"form-group row\">\r\n            <label className=\"col-sm-2 col-form-label\">Name</label>\r\n            <div className=\"col-sm-6 col-md-4\">\r\n              <input type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"Name\" onChange={(e) => this.setState({ name: e.target.value })} />\r\n            </div>\r\n            <Button className=\"col-sm-1 btn-fit\" onClick={() => this.handleSearch('name')}><FaSearch /></Button>\r\n          </div>\r\n          <div className=\"row\"><div className=\"col-md-4 offset-md-4\">--------OR---------</div></div><br />\r\n          <div className=\"form-group row\">\r\n            <label className=\"col-sm-2 col-form-label\">Description</label>\r\n            <div className=\"col-sm-6 col-md-4\">\r\n              <input type=\"description\" className=\"form-control\" id=\"description\" placeholder=\"Description\" onChange={(e) => this.setState({ description: e.target.value })} />\r\n            </div>\r\n            <Button className=\"col-sm-1 btn-fit\" onClick={() => this.handleSearch('description')}><FaSearch /></Button>\r\n          </div>\r\n          <div className=\"row\"><div className=\"col-md-4 offset-md-4\">--------OR---------</div></div><br />\r\n          <DateRangePickerComp {...this.state} onSelect={(dateRange) => this.setState({ dateRange })} handleSearch={() => this.handleSearch('dateRange')} />\r\n        </form>\r\n\r\n        <FilesList fetchedFiles={this.state.fetchedFiles} />\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SearchFile;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport UploadFile from './Components/UploadFile';\r\nimport SearchFile from './Components/SearchFile';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Button } from 'reactstrap';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-center margin-header\">\r\n                <img className=\"omc-logo\" src=\"https://omcltd.in/Portals/0/logo.png\" alt=\"OMC Logo\"/>\r\n                <h1>Document management System</h1>\r\n            </div>\r\n            <Router><div>\r\n\r\n                <div className=\"margin-all route-buttons\">\r\n                    <div className=\"d-flex justify-content-around\">\r\n                        <div className=\"p-2 text-center\"><Link to=\"/uploadFile\"><Button outline color=\"info\">Upload Document</Button></Link></div>\r\n                        <div className=\"p-2 text-center\"><Link to=\"/searchFile\"><Button outline color=\"info\">Search Document</Button></Link></div>\r\n                    </div>\r\n                </div>\r\n                <Route path=\"/uploadFile\" component={UploadFile}></Route>\r\n                <Route path=\"/searchFile\" component={SearchFile}></Route>\r\n\r\n            </div></Router>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}